apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: automate-metashape-workflow-
spec:
  serviceAccountName: argo
  entrypoint: main

  # A list of input parameters available to the workflow at runtime.
  # These parameters can be referenced throughout the workflow templates using {{workflow.parameters.<name>}}
  arguments:
    parameters:
      - name: CONFIG_LIST
        default: "config_list.txt"
      - name: RUN_FOLDER
        default: "default-run"
      - name: AGISOFT_FLS
        default: ""
      # S3 / rclone upload parameters
      - name: S3_BUCKET
        default: ""
      - name: S3_ENDPOINT
        default: ""
      - name: S3_PROVIDER
        default: ""      # e.g., AWS, Minio, Ceph

  # Defining where to read raw drone imagery data and write out imagery products to `/ofo-share`
  volumes:
    - name: data
      persistentVolumeClaim:
        claimName: ceph-share-rw-pvc2
    - name: results
      persistentVolumeClaim:
        claimName: argo-output-nfs-pvc

  templates:
    # the 'main' template defines the order of high-level steps to be completed in the workflow.
    # the 'process-datasets' step has a looping directive (withParam) which goes through each dataset name and processes it.
    - name: main
      steps:
        - - name: determine-datasets
            template: determine-datasets
        - - name: process-datasets
            template: process-dataset-workflow
            arguments:
              parameters:
                - name: dataset-name
                  value: "{{item}}"
            withParam: "{{steps.determine-datasets.outputs.result}}"

## Here we define what the main steps actually do

   # Use containerized python to parse through the list of datasets as specified from runtime parameter 'CONFIG_LIST'
    # outputs a json of dataset names that is passed to the next steps
    - name: determine-datasets
      script:
        image: python:3.9
        volumeMounts:
          - name: data
            mountPath: /input
            subPath: "argo-input/{{workflow.parameters.CONFIG_LIST}}"
        command: ["python3"]
        source: |
          import json, sys, os
          with open("/input", "r") as f:
              datasets = []
              for line in f:
                  name = line.strip()
                  if name:
                      base = os.path.splitext(name)[0]  # removes .yml, .yaml, etc.
                      datasets.append(base)

              # Output as JSON list
              json.dump(datasets, sys.stdout)

    # High-level order of steps in the 'process-dataset-workflow' step. Each step will be defined later.
    - name: process-dataset-workflow
      inputs:
        parameters:
          - name: dataset-name
      dag:
        tasks:
          - name: run-processing
            template: run-automate-metashape
            arguments:
              parameters:
                - name: dataset-name
                  value: "{{inputs.parameters.dataset-name}}"
            continueOn:
              failed: true

          # As soon as processing finishes, kick off upload in parallel on any available node
          - name: rclone-upload
            dependencies: [run-processing]
            template: rclone-upload-to-s3
            arguments:
              parameters:
                - name: dataset-name
                  value: "{{inputs.parameters.dataset-name}}"

    ## Here we define what each step does in 'process-dataset-workflow' step

    # Defining how to process each dataset name
    - name: run-automate-metashape
      inputs:
        parameters:
          - name: dataset-name
      # the following 'metadata' and 'affinity' language is about ensuring one metashape project on one VM
      metadata:
        labels:
          workload-type: metashape-job
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: workload-type
                    operator: In
                    values:
                      - metashape-job
              topologyKey: "kubernetes.io/hostname"
      # Use docker automate-metashape to do photogrammetry
      container:
        image: ghcr.io/open-forest-observatory/automate-metashape
        volumeMounts:
          - name: data
            mountPath: /data
        command: ["python3", "/app/python/metashape_workflow.py"]
        args:
          - "--config_file"
          - "/data/argo-input/configs/{{inputs.parameters.dataset-name}}.yml"
          - "--project-path"
          - "/data/argo-output/{{workflow.parameters.RUN_FOLDER}}/{{inputs.parameters.dataset-name}}/project"
          - "--output-path"
          - "/data/argo-output/{{workflow.parameters.RUN_FOLDER}}/{{inputs.parameters.dataset-name}}/output"
          - "--run-name"
          - "{{inputs.parameters.dataset-name}}"
        resources:
          requests:
            nvidia.com/gpu: 1
          limits:
            nvidia.com/gpu: 1
        env:
          - name: AGISOFT_FLS
            value: "{{workflow.parameters.AGISOFT_FLS}}"

  # --------- RCLONE UPLOAD (Docker image) ---------
    - name: rclone-upload-to-s3
      inputs:
        parameters:
          - name: dataset-name
      container:
        image: rclone/rclone:latest
        volumeMounts:
          - name: results
            mountPath: /results
        command: ["/bin/sh", "-lc"]
        args:
          - |
            set -euo pipefail
            SRC="/results/{{workflow.parameters.RUN_FOLDER}}/{{inputs.parameters.dataset-name}}/output/"
            SRC_parent="/results/{{workflow.parameters.RUN_FOLDER}}/{{inputs.parameters.dataset-name}}"
            DST=":s3:{{workflow.parameters.S3_BUCKET}}/{{workflow.parameters.RUN_FOLDER}}"

            echo "[rclone] Uploading $SRC -> $DST"
            rclone copy "$SRC" "$DST" \
              --s3-provider "{{workflow.parameters.S3_PROVIDER}}" \
              --s3-endpoint "{{workflow.parameters.S3_ENDPOINT}}" \
              --s3-access-key-id "$RCLONE_S3_ACCESS_KEY_ID" \
              --s3-secret-access-key "$RCLONE_S3_SECRET_ACCESS_KEY" \
              --transfers 8 --checkers 8 --retries 5 --retries-sleep=15s \
              --s3-upload-cutoff 200Mi --s3-chunk-size 100Mi --s3-upload-concurrency 4 \
              --stats 15s --stats-log-level NOTICE

            echo "[rclone] Upload complete. "

            # Check if upload was successful
            if [ $? -eq 0 ]; then
              echo "[rclone] Upload successful for {{inputs.parameters.dataset-name}}"

              # Clean up local files after successful upload
              echo "[cleanup] Removing local files after successful upload..."
              if [ -d "$SRC_parent" ]; then
                rm -rf "$SRC_parent"
                echo "[cleanup] Successfully removed: $SRC_parent"
              else
                echo "[cleanup] Source directory not found: $SRC_parent"
              fi
            else
              echo "[rclone] Upload failed for {{inputs.parameters.dataset-name}}"
              echo "[cleanup] Keeping local files due to upload failure"
              exit 1
            fi

            echo "[rclone] Upload and cleanup completed for {{inputs.parameters.dataset-name}}"

        # Light footprint so it can co-locate with Metashape if the node has room.
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "1"
            memory: "2Gi"
        env:
          - name: RCLONE_S3_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: s3-credentials
                key: access_key
          - name: RCLONE_S3_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: s3-credentials
                key: secret_key

