apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: automate-metashape-workflow-
spec:
  serviceAccountName: argo
  entrypoint: main

  # A list of input parameters available to the workflow at runtime. 
  # These parameters can be referenced throughout the workflow templates using {{workflow.parameters.<name>}}.
  arguments:
    parameters:
      - name: CONFIG_LIST
        default: "config_list.txt"
      - name: RUN_FOLDER
        default: "default-run"
      - name: AGISOFT_FLS
        default: ""
      - name: DB_HOST
        default: ""
      - name: DB_NAME
        default: ""
      - name: DB_USER
        default: ""
      - name: DB_PASSWORD
        default: ""

  # Defining where to read raw drone imagery data and write out imagery products to `/ofo-share`
  volumes:
  - name: data
    persistentVolumeClaim:
      claimName: ofo-share-nfs-pvc
  - name: results
    persistentVolumeClaim:
      claimName: argo-output-nfs-pvc

  templates:
    # the 'main' template defines the order of high-level steps to be completed in the workflow. 
    # the 'process-datasets' step has a looping directive (withParam) which goes through each dataset name and processes it. 
    - name: main
      steps:
        - - name: determine-configs
            template: determine-configs
        - - name: log-configs-to-db
            template: log-configs-to-db
            arguments:
              parameters:
                - name: configs
                  value: "{{steps.determine-configs.outputs.result}}"
        - - name: process-configs
            template: process-config-workflow
            arguments:
              parameters:
                - name: config-file
                  value: "{{item}}"
            withParam: "{{steps.determine-configs.outputs.result}}"

    ## here we define what the main steps actually do 
    
    # Use containerized python to parse through the list of datasets as specified from runtime parameter 'DATASET_LIST'
    # outputs a json of dataset names that is passed to the next steps
    - name: determine-datasets
      script:
        image: python:3.9
        volumeMounts:
        - name: data
          mountPath: /input
          subPath: "argo-input/{{workflow.parameters.CONFIG_LIST}}"
        command: ["python3"]
        source: |
          import json
          import sys
          file_path = "/input"
          with open(file_path, "r") as f:
            json.dump([line.strip() for line in f], sys.stdout)

    # launches a docker container which contains our custom py script to log the dataset names into a postgis database
    # takes the json list of dataset names (from the 'determine datasets' step)
    - name: log-configs-to-db
      inputs:
        parameters:
          - name: configs
      container:
        image: ghcr.io/open-forest-observatory/ofo-argo-utils:latest
        command: ["python", "/app/db_logger.py"]
        args:
          - "log-initial"
          - "--workflow-id"
          - "{{workflow.name}}"
          - "--configs-json"
          - "{{inputs.parameters.configs}}"
        env:
          - name: DB_HOST
            value: "{{workflow.parameters.DB_HOST}}"
          - name: DB_NAME
            value: "{{workflow.parameters.DB_NAME}}"
          - name: DB_USER
            value: "{{workflow.parameters.DB_USER}}"
          - name: DB_PASSWORD
            value: "{{workflow.parameters.DB_PASSWORD}}"
    
    # High-level order of steps in the workflow. Each step will be defined later.      
    - name: process-config-workflow
      inputs:
        parameters:
          - name: dataset-name  
      steps:
        - - name: log-start
            template: log-config-start
            arguments:
              parameters:
                - name: config-file
                  value: "{{inputs.parameters.config-file}}"
        - - name: run-processing
            template: run-automate-metashape
            arguments:
              parameters:
                - name: config-file
                  value: "{{inputs.parameters.config-file}}" 
            continueOn:
              failed: true  # EVEN IF this step fails, keep the workflow running (needed to log failure in DB later)
        - - name: determine-success
            template: evaluate-success
            arguments:
              parameters:
                - name: step-status
                  value: "{{steps.run-processing.status}}"
        - - name: log-completion
            template: log-config-completion
            arguments:
              parameters:
                - name: config-file
                  value: "{{inputs.parameters.config-file}}"
                - name: success
                  value: "{{steps.determine-success.outputs.result}}"      

    ## Here we define what each step does
    
    # use our custom containerized db_logger.py to log 'processing' in the postgis DB
    - name: log-config-start
      inputs:
        parameters:
          - name: config-file
      container:
        image: ghcr.io/open-forest-observatory/ofo-argo-utils:latest
        command: ["python", "/app/db_logger.py"]
        args:
          - "log-start"
          - "--workflow-id"
          - "{{workflow.name}}"
          - "--config"
          - "{{inputs.parameters.config-file}}"
        env:
          - name: DB_HOST
            value: "{{workflow.parameters.DB_HOST}}"
          - name: DB_NAME
            value: "{{workflow.parameters.DB_NAME}}"
          - name: DB_USER
            value: "{{workflow.parameters.DB_USER}}"
          - name: DB_PASSWORD
            value: "{{workflow.parameters.DB_PASSWORD}}"
    
    # use our custom containerized db_logger.py to log 'completed' or 'failed' in the postgis DB
    - name: log-config-completion
      inputs:
        parameters:
          - name: config-file
          - name: success
      container:
        image: ghcr.io/open-forest-observatory/ofo-argo-utils:latest
        command: ["python", "/app/db_logger.py"]
        args:
          - "log-completion"
          - "--workflow-id"
          - "{{workflow.name}}"
          - "--config"
          - "{{inputs.parameters.config-file}}"
          - "--success"
          - "{{inputs.parameters.success}}"
        env:
          - name: DB_HOST
            value: "{{workflow.parameters.DB_HOST}}"
          - name: DB_NAME
            value: "{{workflow.parameters.DB_NAME}}"
          - name: DB_USER
            value: "{{workflow.parameters.DB_USER}}"
          - name: DB_PASSWORD
            value: "{{workflow.parameters.DB_PASSWORD}}"
    
    # Script to determine success of failure of step
    - name: evaluate-success
      inputs:
        parameters:
          - name: step-status
      script:
        image: python:3.9
        command: ["python3"]
        source: |
          import sys
          status = "{{inputs.parameters.step-status}}"
          sys.stdout.write("true" if status == "Succeeded" else "false")

    # Defining how to process each dataset name      
    - name: run-automate-metashape
      inputs:
        parameters:
          - name: config-file
      # the following 'metadata' and 'affinity' language is about ensuring one metashape project on one VM
      metadata:
        labels:
          workload-type: metashape-job  # arbitrary, but used for pod spreading
      
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: workload-type
                    operator: In
                    values:
                      - metashape-job
              topologyKey: "kubernetes.io/hostname"

      # Use docker automate-metashape to do photogrammetry
      container:
        image: ghcr.io/open-forest-observatory/automate-metashape
        volumeMounts:
        - name: data
          mountPath: /data
        - name: results
          mountPath: /results
        command: ["python3", "/app/python/metashape_workflow.py"]
        args: 
          - "--config_file"
          - "/data/argo-input/configs/{{inputs.parameters.config-file}}"
          #- "--photo-path"
          #- "/data/argo-input/{{inputs.parameters.dataset-names}}"
          - "--project-path"
          - "/results/{{workflow.parameters.RUN_FOLDER}}/{{inputs.parameters.config-file}}/project"
          - "--output-path"
          - "/results/{{workflow.parameters.RUN_FOLDER}}/{{inputs.parameters.config-file}}/output"
          - "--run-name"
          - "{{inputs.parameters.config-file}}"
        env:
          - name: AGISOFT_FLS
            value: "{{workflow.parameters.AGISOFT_FLS}}"

         
